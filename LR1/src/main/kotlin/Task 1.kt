// ‚Ññ4. –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –µ–≥–æ —Å–æ —Å—Ç—Ä–æ–∫–æ–π-–æ–±—Ä–∞–∑—Ü–æ–º.
fun task4() {
    println(message = "Task 4")
    print(message = "Enter password: ")
    val passwordSample: String = "1qazxsw2" // Secret password
    if (passwordSample.equals(readLine())) println(message = "Passwords are equal") else println(message = "Incorrect password")
}

// ‚Ññ5. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –≤–≤–æ–¥–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –ø–æ–¥—Å—á–µ—Ç–∞ –∏—Ö —Å—É–º–º—ã (–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è) –∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å.
fun task5(args: Array<String>) {
    println(message = "Task 5")
    println(message = args.sumOf { Integer.parseInt(it) })
}

// ‚Ññ10. –í–≤–µ—Å—Ç–∏ —Å –∫–æ–Ω—Å–æ–ª–∏ n —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏ –ø–æ–º–µ—Å—Ç–∏—Ç—å –∏—Ö –≤ –º–∞—Å—Å–∏–≤. –ù–∞ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–µ—Å—Ç–∏: —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ —á–∏—Å–µ–ª.
fun task10() {
    println(message = "Task 10")
    print("Enter the number of integers: ")
    val n = readLine()?.toIntOrNull() ?: return

    val arr = IntArray(n)
    println("Enter $n integers:")
    for (i in 0 until n) arr[i] = readLine()?.toIntOrNull() ?: return

    val freq = HashMap<Int, Int>()
    for (num in arr) freq[num] = freq.getOrDefault(num, 0) + 1

    val sortedNumbers = freq.entries.sortedByDescending { it.value }.map { it.key }
    println("Numbers in order of frequency of occurrence:")
    for (num in sortedNumbers) print("$num  ")
    println()
}

// ‚Ññ11. –í–≤–µ—Å—Ç–∏ —Å –∫–æ–Ω—Å–æ–ª–∏ n —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏ –ø–æ–º–µ—Å—Ç–∏—Ç—å –∏—Ö –≤ –º–∞—Å—Å–∏–≤. –ù–∞ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–µ—Å—Ç–∏: ¬´–°—á–∞—Å—Ç–ª–∏–≤—ã–µ¬ª —á–∏—Å–ª–∞.
fun task11() {

    fun sumOfSquares(number: Int): Int {
        var sum = 0
        var n = number
        while (n > 0) {
            val digit = n % 10
            sum += digit * digit
            n /= 10
        }
        return sum
    }

    fun isHappy(number: Int): Boolean {
        var sum = number
        while (sum != 1 && sum != 4) {
            sum = sumOfSquares(sum)
        }
        return sum == 1
    }

    println(message = "Task 11")
    print("Enter n integers separated by spaces: ")
    val input = readLine()?.trim() ?: return
    val numbers = input.split(" ").mapNotNull { it.toIntOrNull() }.toList()

    val happyNumbers = mutableListOf<Int>()
    for (number in numbers) {
        if (isHappy(number)) {
            happyNumbers.add(number)
        }
    }

    if (happyNumbers.isNotEmpty()) {
        println("Happy numbers: ${happyNumbers.joinToString()}")
    } else {
        println("There's no happy numbers üò¢")
    }

}
